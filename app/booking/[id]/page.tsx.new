"use client"

import { useEffect, useState } from "react"
import { useParams, useRouter, useSearchParams } from "next/navigation"
import { useAuth } from "@/contexts/AuthContext"
import { ProtectedRoute } from "@/components/ProtectedRoute"
import { ModernNavbar } from "@/components/ModernNavbar"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { doctorsAPI, appointmentsAPI, type Doctor } from "@/lib/api"
import {
  Calendar,
  Clock,
  Video,
  Phone,
  Building,
  CreditCard,
  CheckCircle,
  Wifi,
  Shield,
  DollarSign,
  ArrowLeft,
  Stethoscope,
  Check,
  MapPin
} from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { motion, AnimatePresence } from "framer-motion"
import confetti from "canvas-confetti"

export default function BookAppointmentPage() {
  const params = useParams()
  const router = useRouter()
  const searchParams = useSearchParams()
  const { user } = useAuth()
  const { toast } = useToast()

  const [doctor, setDoctor] = useState<Doctor | null>(null)
  const [consultationType, setConsultationType] = useState(searchParams.get("type") || "clinic")
  const [selectedDate, setSelectedDate] = useState("")
  const [selectedTime, setSelectedTime] = useState("")
  const [symptoms, setSymptoms] = useState("")
  const [isLoading, setIsLoading] = useState(true)
  const [showPayment, setShowPayment] = useState(false)
  const [bookingStage, setBookingStage] = useState(0)
  const [bookingComplete, setBookingComplete] = useState(false)
  const [isProcessing, setIsProcessing] = useState(false)
  const [redirectCountdown, setRedirectCountdown] = useState(3)

  // Define getConsultationFee function before using it
  const getConsultationFee = () => {
    if (!doctor) return 0
    if (consultationType === "clinic") return doctor.consultationFee
    if (consultationType === "video") return doctor.videoConsultationFee
    if (consultationType === "call") return doctor.callConsultationFee || doctor.videoConsultationFee
    return 0
  }

  // Booking stages with enhanced descriptions
  const bookingStages = [
    { 
      title: "Checking Availability", 
      description: "Verifying doctor's schedule for your selected time slot",
      icon: Calendar, 
      color: "text-blue-500" 
    },
    { 
      title: "Verifying Connection", 
      description: consultationType === "video" ? "Ensuring your video connection is ready" : 
                  consultationType === "call" ? "Preparing your phone connection" : 
                  "Confirming clinic availability",
      icon: consultationType === "video" ? Wifi : 
            consultationType === "call" ? Phone : 
            Building, 
      color: consultationType === "video" ? "text-purple-500" : 
             consultationType === "call" ? "text-green-500" : 
             "text-orange-500" 
    },
    { 
      title: "Processing Payment", 
      description: `Securely processing your $${getConsultationFee()} payment`,
      icon: DollarSign, 
      color: "text-purple-500" 
    },
    { 
      title: "Securing Booking", 
      description: "Finalizing your appointment and sending confirmation",
      icon: Shield, 
      color: "text-emerald-500" 
    },
  ]

  useEffect(() => {
    if (params.id) {
      loadDoctor(params.id as string)
    }
  }, [params.id])

  // Set default date to today
  useEffect(() => {
    if (doctor) {
      const dates = getAvailableDates()
      if (dates.length > 0) {
        setSelectedDate(dates[0].date)
      }
    }
  }, [doctor, consultationType])

  // Confetti and redirection after booking complete
  useEffect(() => {
    if (bookingComplete) {
      // Trigger confetti animation
      const duration = 3 * 1000
      const animationEnd = Date.now() + duration
      const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 }

      function randomInRange(min, max) {
        return Math.random() * (max - min) + min
      }

      const interval = setInterval(function() {
        const timeLeft = animationEnd - Date.now()

        if (timeLeft <= 0) {
          return clearInterval(interval)
        }

        const particleCount = 50 * (timeLeft / duration)
        
        // since particles fall down, start a bit higher than random
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
        })
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
        })
      }, 250)

      // Countdown timer for redirection
      const countdownInterval = setInterval(() => {
        setRedirectCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(countdownInterval)
            return 0
          }
          return prev - 1
        })
      }, 1000)

      // Redirect to appointments page after countdown completes
      const redirectTimer = setTimeout(() => {
        router.push("/appointments")
      }, 3000)
      
      return () => {
        clearInterval(interval)
        clearInterval(countdownInterval)
        clearTimeout(redirectTimer)
      }
    }
  }, [bookingComplete, router])

  // Reset countdown when component unmounts or booking is cancelled
  useEffect(() => {
    return () => {
      setRedirectCountdown(3)
    }
  }, [])

  const loadDoctor = async (id: string) => {
    try {
      const doctorData = await doctorsAPI.getById(id)
      setDoctor(doctorData)
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to load doctor information",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // getConsultationFee function moved to before bookingStages array

  const getAvailableDates = () => {
    const dates = []
    const today = new Date()
    for (let i = 0; i < 14; i++) {
      const date = new Date(today)
      date.setDate(today.getDate() + i)
      const dayName = date.toLocaleDateString("en-US", { weekday: "long" })
      // Check if doctor is available on this day
      const availabilityKey = consultationType === "clinic" ? "clinic" : "online"
      const isAvailable = doctor?.availability?.[availabilityKey]?.includes(dayName)
      if (isAvailable) {
        dates.push({
          date: date.toISOString().split("T")[0],
          display: date.toLocaleDateString("en-US", {
            weekday: "short",
            month: "short",
            day: "numeric"
          }),
          isToday: i === 0
        })
      }
    }
    return dates
  }

  const getAvailableTimes = () => {
    // Simulated time slots
    return [
      "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM",
      "1:00 PM", "1:30 PM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM"
    ]
  }

  const handleBookAppointment = () => {
    setShowPayment(true)
  }

  const handlePayment = async () => {
    try {
      setIsProcessing(true)
      
      // Simulate multi-stage booking process
      for (let i = 0; i < bookingStages.length; i++) {
        setBookingStage(i)
        // Add delay to simulate processing
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      // Create appointment object
      const appointment = {
        id: Date.now().toString(),
        doctorId: doctor?.id,
        doctorName: doctor?.name,
        doctorSpecialty: doctor?.specialty,
        doctorImage: doctor?.image,
        patientId: user?.id,
        patientName: user?.name,
        date: selectedDate,
        time: selectedTime,
        consultationType,
        symptoms,
        status: "confirmed",
        fee: getConsultationFee(),
        createdAt: new Date().toISOString()
      }

      // Book appointment
      await appointmentsAPI.create(appointment)

      // Show success message
      toast({
        title: "Success",
        description: `Your appointment with Dr. ${doctor?.name} has been booked successfully!`,
        variant: "default",
      })

      // Set booking complete
      setBookingComplete(true)
    } catch (error) {
      // Show error message
      toast({
        title: "Error",
        description: "An error occurred during payment processing. Please try again.",
        variant: "destructive",
      })
      setIsProcessing(false)
      setShowPayment(false)
      setBookingStage(0)
    }
  }

  // Function to cancel booking process
  const handleCancelBooking = () => {
    setShowPayment(false)
    setBookingStage(0)
    setIsProcessing(false)
  }

  if (isLoading) {
    return (
      <ProtectedRoute allowedRoles={["patient"]}>
        <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
          <ModernNavbar />
          <div className="max-w-4xl mx-auto px-4 py-8">
            <motion.div
              className="text-center py-20"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div className="relative">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto"></div>
                <motion.div
                  className="absolute inset-0 rounded-full border-4 border-transparent border-t-purple-400"
                  animate={{ rotate: -360 }}
                  transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                />
              </div>
              <motion.p
                className="mt-6 text-lg text-gray-600"
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
              >
                Loading booking information...
              </motion.p>
            </motion.div>
          </div>
        </div>
      </ProtectedRoute>
    )
  }

  if (!doctor) {
    return (
      <ProtectedRoute allowedRoles={["patient"]}>
        <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
          <ModernNavbar />
          <div className="max-w-4xl mx-auto px-4 py-8">
            <Card className="text-center py-12">
              <CardContent>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">Doctor not found</h3>
                <p className="text-gray-600 mb-4">The doctor you're looking for doesn't exist or has been removed.</p>
                <Button onClick={() => router.push("/")}>
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Back to Home
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </ProtectedRoute>
    )
  }

  return (
    <ProtectedRoute allowedRoles={["patient"]}>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <ModernNavbar />
        <div className="max-w-4xl mx-auto px-4 py-8">
          {/* Booking Complete Success Screen */}
          {bookingComplete ? (
            <motion.div
              className="text-center py-12"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div className="relative mb-8">
                <div className="w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                  <CheckCircle className="w-12 h-12 text-green-500" />
                </div>
                <motion.div
                  className="absolute inset-0 rounded-full border-4 border-green-200"
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1.2, opacity: 0 }}
                  transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY }}
                />
              </div>
              <h2 className="text-3xl font-bold text-gray-900 mb-4">Booking Confirmed!</h2>
              <p className="text-xl text-gray-600 mb-6">
                Your {consultationType} appointment with {doctor.name} has been scheduled.
              </p>
              <p className="text-lg text-gray-600 mb-8">
                {selectedDate} at {selectedTime}
              </p>
              <p className="text-gray-500 mb-6">
                Redirecting to appointments in {redirectCountdown} seconds...
              </p>
              <Button
                onClick={() => router.push("/appointments")}
                className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg text-lg font-medium"
              >
                View My Appointments
              </Button>
            </motion.div>
          ) : (
            <>
              {/* Payment Processing Modal */}
              {showPayment && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                  <motion.div
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full mx-4"
                  >
                    <div className="text-center mb-6">
                      <h3 className="text-2xl font-bold text-gray-900 mb-2">Processing Your Booking</h3>
                      <p className="text-gray-600">
                        Please wait while we secure your appointment with {doctor.name}
                      </p>
                    </div>

                    <div className="space-y-6 mb-8">
                      {bookingStages.map((stage, index) => {
                        const StageIcon = stage.icon
                        const isActive = bookingStage === index
                        const isComplete = bookingStage > index

                        return (
                          <div
                            key={index}
                            className={`flex items-center ${isActive ? "opacity-100" : isComplete ? "opacity-100" : "opacity-50"}`}
                          >
                            <div
                              className={`relative flex items-center justify-center w-10 h-10 rounded-full mr-4 ${isActive ? "bg-blue-100" : isComplete ? "bg-green-100" : "bg-gray-100"}`}
                            >
                              {isComplete ? (
                                <Check className="w-5 h-5 text-green-500" />
                              ) : (
                                <StageIcon className={`w-5 h-5 ${isActive ? stage.color : "text-gray-400"}`} />
                              )}
                              {isActive && (
                                <motion.div
                                  className="absolute inset-0 rounded-full border-2 border-blue-400"
                                  initial={{ scale: 0.8, opacity: 0 }}
                                  animate={{ scale: 1.2, opacity: 0 }}
                                  transition={{ duration: 1.5, repeat: Number.POSITIVE_INFINITY }}
                                />
                              )}
                            </div>
                            <div>
                              <p className={`font-medium ${isActive ? "text-gray-900" : isComplete ? "text-gray-900" : "text-gray-500"}`}>
                                {stage.title}
                              </p>
                              <p className="text-sm text-gray-500">{stage.description}</p>
                            </div>
                          </div>
                        )
                      })}
                    </div>

                    <div className="flex justify-between">
                      <Button
                        variant="outline"
                        onClick={handleCancelBooking}
                        disabled={isProcessing}
                        className="px-4 py-2"
                      >
                        Cancel
                      </Button>
                      <Button
                        onClick={handlePayment}
                        disabled={isProcessing}
                        className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2"
                      >
                        {isProcessing ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                            Processing...
                          </>
                        ) : (
                          <>Pay ${getConsultationFee()}</>
                        )}
                      </Button>
                    </div>
                  </motion.div>
                </div>
              )}

              {/* Main Booking Form */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Doctor Info Card */}
                <div className="lg:col-span-1">
                  <Card className="sticky top-24 overflow-hidden">
                    <div className="relative">
                      <div className="absolute inset-0 bg-gradient-to-r from-purple-500 to-blue-500 opacity-90"></div>
                      <div className="relative p-6 text-white">
                        <div className="flex items-center mb-4">
                          <div className="w-16 h-16 rounded-full bg-white p-1 mr-4">
                            <img
                              src={doctor.image || "/placeholder.svg"}
                              alt={doctor.name}
                              className="w-full h-full object-cover rounded-full"
                            />
                          </div>
                          <div>
                            <h3 className="text-xl font-bold">{doctor.name}</h3>
                            <p className="text-white text-opacity-90">{doctor.specialty}</p>
                          </div>
                        </div>
                        <div className="space-y-3">
                          <div className="flex items-center">
                            <Stethoscope className="w-5 h-5 mr-3 text-white text-opacity-80" />
                            <span>{doctor.qualifications}</span>
                          </div>
                          <div className="flex items-center">
                            <Clock className="w-5 h-5 mr-3 text-white text-opacity-80" />
                            <span>{doctor.experience} experience</span>
                          </div>
                          <div className="flex items-center">
                            <DollarSign className="w-5 h-5 mr-3 text-white text-opacity-80" />
                            <span>
                              Consultation Fee: ${consultationType === "clinic" ? doctor.consultationFee : 
                                consultationType === "video" ? doctor.videoConsultationFee : 
                                doctor.callConsultationFee || doctor.videoConsultationFee}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    <CardContent className="p-6">
                      <h4 className="font-medium text-gray-900 mb-2">About {doctor.name}</h4>
                      <p className="text-gray-600 text-sm mb-4">{doctor.about}</p>
                    </CardContent>
                  </Card>
                </div>

                {/* Booking Form */}
                <div className="lg:col-span-2">
                  <Card>
                    <CardHeader>
                      <CardTitle>Book Your Appointment</CardTitle>
                      <CardDescription>
                        Choose your preferred consultation type and time slot
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      {/* Consultation Type */}
                      <div>
                        <Label className="text-base font-medium mb-2 block">Consultation Type</Label>
                        <div className="grid grid-cols-3 gap-4">
                          <Button
                            type="button"
                            variant={consultationType === "clinic" ? "default" : "outline"}
                            className={`h-auto py-3 px-4 flex flex-col items-center ${consultationType === "clinic" ? "bg-blue-600" : ""}`}
                            onClick={() => setConsultationType("clinic")}
                          >
                            <Building className="w-6 h-6 mb-1" />
                            <span>Clinic</span>
                          </Button>
                          <Button
                            type="button"
                            variant={consultationType === "video" ? "default" : "outline"}
                            className={`h-auto py-3 px-4 flex flex-col items-center ${consultationType === "video" ? "bg-purple-600" : ""}`}
                            onClick={() => setConsultationType("video")}
                          >
                            <Video className="w-6 h-6 mb-1" />
                            <span>Video</span>
                          </Button>
                          <Button
                            type="button"
                            variant={consultationType === "call" ? "default" : "outline"}
                            className={`h-auto py-3 px-4 flex flex-col items-center ${consultationType === "call" ? "bg-green-600" : ""}`}
                            onClick={() => setConsultationType("call")}
                          >
                            <Phone className="w-6 h-6 mb-1" />
                            <span>Call</span>
                          </Button>
                        </div>
                        <div className="mt-3 text-sm text-gray-500">
                          <p className="flex items-center mb-2">
                            <Shield className="w-4 h-4 mr-2 text-blue-500" />
                            All consultations are secure and follow medical privacy guidelines
                          </p>
                          {consultationType === "video" && (
                            <p className="pl-6 mb-1">You'll receive a secure video link before your appointment</p>
                          )}
                          {consultationType === "call" && (
                            <p className="pl-6 mb-1">You'll receive a call from the doctor at your scheduled time</p>
                          )}
                          {consultationType === "clinic" && (
                            <p className="pl-6 mb-1 flex items-start">
                              <MapPin className="w-4 h-4 mr-2 text-blue-500 flex-shrink-0 mt-0.5" />
                              <span>{doctor.hospital || "Doctor's clinic"}</span>
                            </p>
                          )}
                        </div>
                      </div>

                      {/* Date Selection */}
                      <div>
                        <Label htmlFor="date" className="text-base font-medium mb-2 block">
                          Select Date
                        </Label>
                        <div className="grid grid-cols-3 sm:grid-cols-4 gap-3">
                          {getAvailableDates().map((dateObj) => (
                            <Button
                              key={dateObj.date}
                              type="button"
                              variant={selectedDate === dateObj.date ? "default" : "outline"}
                              className={`h-auto py-3 flex flex-col ${selectedDate === dateObj.date ? "bg-blue-600" : ""}`}
                              onClick={() => setSelectedDate(dateObj.date)}
                            >
                              <span className="text-xs font-normal">{dateObj.display.split(" ")[0]}</span>
                              <span className="text-lg font-medium">{dateObj.display.split(" ")[1]} {dateObj.display.split(" ")[2]}</span>
                              {dateObj.isToday && <span className="text-xs mt-1 bg-green-100 text-green-800 px-2 py-0.5 rounded-full">Today</span>}
                            </Button>
                          ))}
                        </div>
                      </div>

                      {/* Time Selection */}
                      <div>
                        <Label htmlFor="time" className="text-base font-medium mb-2 block">
                          Select Time
                        </Label>
                        <div className="grid grid-cols-3 sm:grid-cols-4 gap-3">
                          {getAvailableTimes().map((time) => (
                            <Button
                              key={time}
                              type="button"
                              variant={selectedTime === time ? "default" : "outline"}
                              className={`h-12 ${selectedTime === time ? "bg-blue-600" : ""}`}
                              onClick={() => setSelectedTime(time)}
                            >
                              {time}
                            </Button>
                          ))}
                        </div>
                      </div>

                      {/* Symptoms */}
                      <div>
                        <Label htmlFor="symptoms" className="text-base font-medium mb-2 block">
                          Describe Your Symptoms (Optional)
                        </Label>
                        <Textarea
                          id="symptoms"
                          placeholder="Please describe your symptoms or reason for consultation"
                          value={symptoms}
                          onChange={(e) => setSymptoms(e.target.value)}
                          className="min-h-[100px]"
                        />
                      </div>

                      {/* Submit Button */}
                      <div className="pt-4">
                        <Button
                          onClick={handleBookAppointment}
                          className="w-full bg-purple-600 hover:bg-purple-700 text-white py-6 text-lg font-medium"
                          disabled={!selectedDate || !selectedTime}
                        >
                          <CreditCard className="w-5 h-5 mr-2" />
                          Proceed to Payment (${getConsultationFee()})
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </ProtectedRoute>
  )
}